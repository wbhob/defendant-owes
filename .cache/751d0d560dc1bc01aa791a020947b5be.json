{"dependencies":[{"name":"../utils/abs-floor","loc":{"line":1,"column":21}},{"name":"../utils/abs-ceil","loc":{"line":2,"column":20}},{"name":"../create/date-from-array","loc":{"line":3,"column":30}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bubble = bubble;\nexports.daysToMonths = daysToMonths;\nexports.monthsToDays = monthsToDays;\n\nvar _absFloor = require(\"../utils/abs-floor\");\n\nvar _absFloor2 = _interopRequireDefault(_absFloor);\n\nvar _absCeil = require(\"../utils/abs-ceil\");\n\nvar _absCeil2 = _interopRequireDefault(_absCeil);\n\nvar _dateFromArray = require(\"../create/date-from-array\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bubble() {\n  var milliseconds = this._milliseconds;\n  var days = this._days;\n  var months = this._months;\n  var data = this._data;\n  var seconds, minutes, hours, years, monthsFromDays;\n\n  // if we have a mix of positive and negative values, bubble down first\n  // check: https://github.com/moment/moment/issues/2166\n  if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n    milliseconds += (0, _absCeil2.default)(monthsToDays(months) + days) * 864e5;\n    days = 0;\n    months = 0;\n  }\n\n  // The following code bubbles up values, see the tests for\n  // examples of what that means.\n  data.milliseconds = milliseconds % 1000;\n\n  seconds = (0, _absFloor2.default)(milliseconds / 1000);\n  data.seconds = seconds % 60;\n\n  minutes = (0, _absFloor2.default)(seconds / 60);\n  data.minutes = minutes % 60;\n\n  hours = (0, _absFloor2.default)(minutes / 60);\n  data.hours = hours % 24;\n\n  days += (0, _absFloor2.default)(hours / 24);\n\n  // convert days to months\n  monthsFromDays = (0, _absFloor2.default)(daysToMonths(days));\n  months += monthsFromDays;\n  days -= (0, _absCeil2.default)(monthsToDays(monthsFromDays));\n\n  // 12 months -> 1 year\n  years = (0, _absFloor2.default)(months / 12);\n  months %= 12;\n\n  data.days = days;\n  data.months = months;\n  data.years = years;\n\n  return this;\n}\n\nfunction daysToMonths(days) {\n  // 400 years have 146097 days (taking into account leap year rules)\n  // 400 years have 12 months === 4800\n  return days * 4800 / 146097;\n}\n\nfunction monthsToDays(months) {\n  // the reverse of daysToMonths\n  return months * 146097 / 4800;\n}"},"hash":"91b3eeec2750d0866b982b95f362148b"}