{"dependencies":[{"name":"../utils/is-function","loc":{"line":1,"column":23}},{"name":"../utils/extend","loc":{"line":2,"column":19}},{"name":"../utils/is-object","loc":{"line":3,"column":21}},{"name":"../utils/has-own-prop","loc":{"line":4,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.set = set;\nexports.mergeConfigs = mergeConfigs;\n\nvar _isFunction = require(\"../utils/is-function\");\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _extend = require(\"../utils/extend\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _isObject = require(\"../utils/is-object\");\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nvar _hasOwnProp = require(\"../utils/has-own-prop\");\n\nvar _hasOwnProp2 = _interopRequireDefault(_hasOwnProp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction set(config) {\n  var prop, i;\n  for (i in config) {\n    prop = config[i];\n    if ((0, _isFunction2.default)(prop)) {\n      this[i] = prop;\n    } else {\n      this['_' + i] = prop;\n    }\n  }\n  this._config = config;\n  // Lenient ordinal parsing accepts just a number in addition to\n  // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n  // TODO: Remove \"ordinalParse\" fallback in next major release.\n  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\\d{1,2}/.source);\n}\n\nfunction mergeConfigs(parentConfig, childConfig) {\n  var res = (0, _extend2.default)({}, parentConfig),\n      prop;\n  for (prop in childConfig) {\n    if ((0, _hasOwnProp2.default)(childConfig, prop)) {\n      if ((0, _isObject2.default)(parentConfig[prop]) && (0, _isObject2.default)(childConfig[prop])) {\n        res[prop] = {};\n        (0, _extend2.default)(res[prop], parentConfig[prop]);\n        (0, _extend2.default)(res[prop], childConfig[prop]);\n      } else if (childConfig[prop] != null) {\n        res[prop] = childConfig[prop];\n      } else {\n        delete res[prop];\n      }\n    }\n  }\n  for (prop in parentConfig) {\n    if ((0, _hasOwnProp2.default)(parentConfig, prop) && !(0, _hasOwnProp2.default)(childConfig, prop) && (0, _isObject2.default)(parentConfig[prop])) {\n      // make sure changes to properties don't modify parent config\n      res[prop] = (0, _extend2.default)({}, res[prop]);\n    }\n  }\n  return res;\n}"},"hash":"a65d04f0612c116b52e2eb65948aa5a7"}