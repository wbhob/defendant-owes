{"dependencies":[{"name":"../utils/zero-fill","loc":{"line":1,"column":21}},{"name":"../duration/create","loc":{"line":2,"column":31}},{"name":"../moment/add-subtract","loc":{"line":3,"column":28}},{"name":"../moment/constructor","loc":{"line":4,"column":37}},{"name":"../format/format","loc":{"line":5,"column":31}},{"name":"../parse/regex","loc":{"line":6,"column":61}},{"name":"../parse/token","loc":{"line":7,"column":30}},{"name":"../create/local","loc":{"line":8,"column":28}},{"name":"../create/from-anything","loc":{"line":9,"column":30}},{"name":"../create/utc","loc":{"line":10,"column":26}},{"name":"../utils/is-date","loc":{"line":11,"column":19}},{"name":"../utils/to-int","loc":{"line":12,"column":18}},{"name":"../utils/is-undefined","loc":{"line":13,"column":24}},{"name":"../utils/compare-arrays","loc":{"line":14,"column":26}},{"name":"../utils/hooks","loc":{"line":15,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneWithOffset = cloneWithOffset;\nexports.getSetOffset = getSetOffset;\nexports.getSetZone = getSetZone;\nexports.setOffsetToUTC = setOffsetToUTC;\nexports.setOffsetToLocal = setOffsetToLocal;\nexports.setOffsetToParsedOffset = setOffsetToParsedOffset;\nexports.hasAlignedHourOffset = hasAlignedHourOffset;\nexports.isDaylightSavingTime = isDaylightSavingTime;\nexports.isDaylightSavingTimeShifted = isDaylightSavingTimeShifted;\nexports.isLocal = isLocal;\nexports.isUtcOffset = isUtcOffset;\nexports.isUtc = isUtc;\n\nvar _zeroFill = require(\"../utils/zero-fill\");\n\nvar _zeroFill2 = _interopRequireDefault(_zeroFill);\n\nvar _create = require(\"../duration/create\");\n\nvar _addSubtract = require(\"../moment/add-subtract\");\n\nvar _constructor = require(\"../moment/constructor\");\n\nvar _format = require(\"../format/format\");\n\nvar _regex = require(\"../parse/regex\");\n\nvar _token = require(\"../parse/token\");\n\nvar _local = require(\"../create/local\");\n\nvar _fromAnything = require(\"../create/from-anything\");\n\nvar _utc = require(\"../create/utc\");\n\nvar _isDate = require(\"../utils/is-date\");\n\nvar _isDate2 = _interopRequireDefault(_isDate);\n\nvar _toInt = require(\"../utils/to-int\");\n\nvar _toInt2 = _interopRequireDefault(_toInt);\n\nvar _isUndefined = require(\"../utils/is-undefined\");\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _compareArrays = require(\"../utils/compare-arrays\");\n\nvar _compareArrays2 = _interopRequireDefault(_compareArrays);\n\nvar _hooks = require(\"../utils/hooks\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// FORMATTING\n\nfunction offset(token, separator) {\n  (0, _format.addFormatToken)(token, 0, 0, function () {\n    var offset = this.utcOffset();\n    var sign = '+';\n    if (offset < 0) {\n      offset = -offset;\n      sign = '-';\n    }\n    return sign + (0, _zeroFill2.default)(~~(offset / 60), 2) + separator + (0, _zeroFill2.default)(~~offset % 60, 2);\n  });\n}\n\noffset('Z', ':');\noffset('ZZ', '');\n\n// PARSING\n\n(0, _regex.addRegexToken)('Z', _regex.matchShortOffset);\n(0, _regex.addRegexToken)('ZZ', _regex.matchShortOffset);\n(0, _token.addParseToken)(['Z', 'ZZ'], function (input, array, config) {\n  config._useUTC = true;\n  config._tzm = offsetFromString(_regex.matchShortOffset, input);\n});\n\n// HELPERS\n\n// timezone chunker\n// '+10:00' > ['10',  '00']\n// '-1530'  > ['-15', '30']\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\nfunction offsetFromString(matcher, string) {\n  var matches = (string || '').match(matcher);\n\n  if (matches === null) {\n    return null;\n  }\n\n  var chunk = matches[matches.length - 1] || [];\n  var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n  var minutes = +(parts[1] * 60) + (0, _toInt2.default)(parts[2]);\n\n  return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n}\n\n// Return a moment from input, that is local/utc/zone equivalent to model.\nfunction cloneWithOffset(input, model) {\n  var res, diff;\n  if (model._isUTC) {\n    res = model.clone();\n    diff = ((0, _constructor.isMoment)(input) || (0, _isDate2.default)(input) ? input.valueOf() : (0, _local.createLocal)(input).valueOf()) - res.valueOf();\n    // Use low-level api, because this fn is low-level api.\n    res._d.setTime(res._d.valueOf() + diff);\n    _hooks.hooks.updateOffset(res, false);\n    return res;\n  } else {\n    return (0, _local.createLocal)(input).local();\n  }\n}\n\nfunction getDateOffset(m) {\n  // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n  // https://github.com/moment/moment/pull/1871\n  return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n}\n\n// HOOKS\n\n// This function will be called whenever a moment is mutated.\n// It is intended to keep the offset in sync with the timezone.\n_hooks.hooks.updateOffset = function () {};\n\n// MOMENTS\n\n// keepLocalTime = true means only change the timezone, without\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n// +0200, so we adjust the time as needed, to be valid.\n//\n// Keeping the time actually adds/subtracts (one hour)\n// from the actual represented time. That is why we call updateOffset\n// a second time. In case it wants us to change the offset again\n// _changeInProgress == true case, then we have to adjust, because\n// there is no such time in the given timezone.\nfunction getSetOffset(input, keepLocalTime, keepMinutes) {\n  var offset = this._offset || 0,\n      localAdjust;\n  if (!this.isValid()) {\n    return input != null ? this : NaN;\n  }\n  if (input != null) {\n    if (typeof input === 'string') {\n      input = offsetFromString(_regex.matchShortOffset, input);\n      if (input === null) {\n        return this;\n      }\n    } else if (Math.abs(input) < 16 && !keepMinutes) {\n      input = input * 60;\n    }\n    if (!this._isUTC && keepLocalTime) {\n      localAdjust = getDateOffset(this);\n    }\n    this._offset = input;\n    this._isUTC = true;\n    if (localAdjust != null) {\n      this.add(localAdjust, 'm');\n    }\n    if (offset !== input) {\n      if (!keepLocalTime || this._changeInProgress) {\n        (0, _addSubtract.addSubtract)(this, (0, _create.createDuration)(input - offset, 'm'), 1, false);\n      } else if (!this._changeInProgress) {\n        this._changeInProgress = true;\n        _hooks.hooks.updateOffset(this, true);\n        this._changeInProgress = null;\n      }\n    }\n    return this;\n  } else {\n    return this._isUTC ? offset : getDateOffset(this);\n  }\n}\n\nfunction getSetZone(input, keepLocalTime) {\n  if (input != null) {\n    if (typeof input !== 'string') {\n      input = -input;\n    }\n\n    this.utcOffset(input, keepLocalTime);\n\n    return this;\n  } else {\n    return -this.utcOffset();\n  }\n}\n\nfunction setOffsetToUTC(keepLocalTime) {\n  return this.utcOffset(0, keepLocalTime);\n}\n\nfunction setOffsetToLocal(keepLocalTime) {\n  if (this._isUTC) {\n    this.utcOffset(0, keepLocalTime);\n    this._isUTC = false;\n\n    if (keepLocalTime) {\n      this.subtract(getDateOffset(this), 'm');\n    }\n  }\n  return this;\n}\n\nfunction setOffsetToParsedOffset() {\n  if (this._tzm != null) {\n    this.utcOffset(this._tzm, false, true);\n  } else if (typeof this._i === 'string') {\n    var tZone = offsetFromString(_regex.matchOffset, this._i);\n    if (tZone != null) {\n      this.utcOffset(tZone);\n    } else {\n      this.utcOffset(0, true);\n    }\n  }\n  return this;\n}\n\nfunction hasAlignedHourOffset(input) {\n  if (!this.isValid()) {\n    return false;\n  }\n  input = input ? (0, _local.createLocal)(input).utcOffset() : 0;\n\n  return (this.utcOffset() - input) % 60 === 0;\n}\n\nfunction isDaylightSavingTime() {\n  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n}\n\nfunction isDaylightSavingTimeShifted() {\n  if (!(0, _isUndefined2.default)(this._isDSTShifted)) {\n    return this._isDSTShifted;\n  }\n\n  var c = {};\n\n  (0, _constructor.copyConfig)(c, this);\n  c = (0, _fromAnything.prepareConfig)(c);\n\n  if (c._a) {\n    var other = c._isUTC ? (0, _utc.createUTC)(c._a) : (0, _local.createLocal)(c._a);\n    this._isDSTShifted = this.isValid() && (0, _compareArrays2.default)(c._a, other.toArray()) > 0;\n  } else {\n    this._isDSTShifted = false;\n  }\n\n  return this._isDSTShifted;\n}\n\nfunction isLocal() {\n  return this.isValid() ? !this._isUTC : false;\n}\n\nfunction isUtcOffset() {\n  return this.isValid() ? this._isUTC : false;\n}\n\nfunction isUtc() {\n  return this.isValid() ? this._isUTC && this._offset === 0 : false;\n}"},"hash":"fb4a8e6716e44f20daed3588d7b52fa2"}