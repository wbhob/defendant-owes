{"dependencies":[{"name":"../utils/hooks","loc":{"line":1,"column":22}},{"name":"./date-from-array","loc":{"line":2,"column":42}},{"name":"../units/year","loc":{"line":3,"column":27}},{"name":"../units/week-calendar-utils","loc":{"line":4,"column":60}},{"name":"../units/constants","loc":{"line":5,"column":69}},{"name":"./local","loc":{"line":6,"column":28}},{"name":"../utils/defaults","loc":{"line":7,"column":21}},{"name":"./parsing-flags","loc":{"line":8,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFromArray = configFromArray;\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar _dateFromArray = require(\"./date-from-array\");\n\nvar _year = require(\"../units/year\");\n\nvar _weekCalendarUtils = require(\"../units/week-calendar-utils\");\n\nvar _constants = require(\"../units/constants\");\n\nvar _local = require(\"./local\");\n\nvar _defaults = require(\"../utils/defaults\");\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _parsingFlags = require(\"./parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currentDateArray(config) {\n  // hooks is actually the exported moment object\n  var nowValue = new Date(_hooks.hooks.now());\n  if (config._useUTC) {\n    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n  }\n  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n\n// convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\nfunction configFromArray(config) {\n  var i,\n      date,\n      input = [],\n      currentDate,\n      expectedWeekday,\n      yearToUse;\n\n  if (config._d) {\n    return;\n  }\n\n  currentDate = currentDateArray(config);\n\n  //compute day of the year from weeks and weekdays\n  if (config._w && config._a[_constants.DATE] == null && config._a[_constants.MONTH] == null) {\n    dayOfYearFromWeekInfo(config);\n  }\n\n  //if the day of the year is set, figure out what it is\n  if (config._dayOfYear != null) {\n    yearToUse = (0, _defaults2.default)(config._a[_constants.YEAR], currentDate[_constants.YEAR]);\n\n    if (config._dayOfYear > (0, _year.daysInYear)(yearToUse) || config._dayOfYear === 0) {\n      (0, _parsingFlags2.default)(config)._overflowDayOfYear = true;\n    }\n\n    date = (0, _dateFromArray.createUTCDate)(yearToUse, 0, config._dayOfYear);\n    config._a[_constants.MONTH] = date.getUTCMonth();\n    config._a[_constants.DATE] = date.getUTCDate();\n  }\n\n  // Default to current date.\n  // * if no year, month, day of month are given, default to today\n  // * if day of month is given, default month and year\n  // * if month is given, default only year\n  // * if year is given, don't default anything\n  for (i = 0; i < 3 && config._a[i] == null; ++i) {\n    config._a[i] = input[i] = currentDate[i];\n  }\n\n  // Zero out whatever was not defaulted, including time\n  for (; i < 7; i++) {\n    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n  }\n\n  // Check for 24:00:00.000\n  if (config._a[_constants.HOUR] === 24 && config._a[_constants.MINUTE] === 0 && config._a[_constants.SECOND] === 0 && config._a[_constants.MILLISECOND] === 0) {\n    config._nextDay = true;\n    config._a[_constants.HOUR] = 0;\n  }\n\n  config._d = (config._useUTC ? _dateFromArray.createUTCDate : _dateFromArray.createDate).apply(null, input);\n  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n  // Apply timezone offset from input. The actual utcOffset can be changed\n  // with parseZone.\n  if (config._tzm != null) {\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n  }\n\n  if (config._nextDay) {\n    config._a[_constants.HOUR] = 24;\n  }\n\n  // check for mismatching day of week\n  if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n    (0, _parsingFlags2.default)(config).weekdayMismatch = true;\n  }\n}\n\nfunction dayOfYearFromWeekInfo(config) {\n  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n  w = config._w;\n  if (w.GG != null || w.W != null || w.E != null) {\n    dow = 1;\n    doy = 4;\n\n    // TODO: We need to take the current isoWeekYear, but that depends on\n    // how we interpret now (local, utc, fixed offset). So create\n    // a now version of current config (take local/utc/offset flags, and\n    // create now).\n    weekYear = (0, _defaults2.default)(w.GG, config._a[_constants.YEAR], (0, _weekCalendarUtils.weekOfYear)((0, _local.createLocal)(), 1, 4).year);\n    week = (0, _defaults2.default)(w.W, 1);\n    weekday = (0, _defaults2.default)(w.E, 1);\n    if (weekday < 1 || weekday > 7) {\n      weekdayOverflow = true;\n    }\n  } else {\n    dow = config._locale._week.dow;\n    doy = config._locale._week.doy;\n\n    var curWeek = (0, _weekCalendarUtils.weekOfYear)((0, _local.createLocal)(), dow, doy);\n\n    weekYear = (0, _defaults2.default)(w.gg, config._a[_constants.YEAR], curWeek.year);\n\n    // Default to current week.\n    week = (0, _defaults2.default)(w.w, curWeek.week);\n\n    if (w.d != null) {\n      // weekday -- low day numbers are considered next week\n      weekday = w.d;\n      if (weekday < 0 || weekday > 6) {\n        weekdayOverflow = true;\n      }\n    } else if (w.e != null) {\n      // local weekday -- counting starts from begining of week\n      weekday = w.e + dow;\n      if (w.e < 0 || w.e > 6) {\n        weekdayOverflow = true;\n      }\n    } else {\n      // default to begining of week\n      weekday = dow;\n    }\n  }\n  if (week < 1 || week > (0, _weekCalendarUtils.weeksInYear)(weekYear, dow, doy)) {\n    (0, _parsingFlags2.default)(config)._overflowWeeks = true;\n  } else if (weekdayOverflow != null) {\n    (0, _parsingFlags2.default)(config)._overflowWeekday = true;\n  } else {\n    temp = (0, _weekCalendarUtils.dayOfYearFromWeeks)(weekYear, week, weekday, dow, doy);\n    config._a[_constants.YEAR] = temp.year;\n    config._dayOfYear = temp.dayOfYear;\n  }\n}"},"hash":"3ebdaa3e38b8d2b4af8f28e3cd261a21"}