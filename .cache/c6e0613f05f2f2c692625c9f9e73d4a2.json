{"dependencies":[{"name":"./from-string","loc":{"line":1,"column":49}},{"name":"./from-array","loc":{"line":2,"column":32}},{"name":"../parse/regex","loc":{"line":3,"column":40}},{"name":"../parse/token","loc":{"line":4,"column":40}},{"name":"../format/format","loc":{"line":5,"column":69}},{"name":"./check-overflow","loc":{"line":6,"column":26}},{"name":"../units/constants","loc":{"line":7,"column":21}},{"name":"../utils/hooks","loc":{"line":8,"column":22}},{"name":"./parsing-flags","loc":{"line":9,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFromStringAndFormat = configFromStringAndFormat;\n\nvar _fromString = require(\"./from-string\");\n\nvar _fromArray = require(\"./from-array\");\n\nvar _regex = require(\"../parse/regex\");\n\nvar _token = require(\"../parse/token\");\n\nvar _format = require(\"../format/format\");\n\nvar _checkOverflow = require(\"./check-overflow\");\n\nvar _checkOverflow2 = _interopRequireDefault(_checkOverflow);\n\nvar _constants = require(\"../units/constants\");\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar _parsingFlags = require(\"./parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// constant that refers to the ISO standard\n_hooks.hooks.ISO_8601 = function () {};\n\n// constant that refers to the RFC 2822 form\n_hooks.hooks.RFC_2822 = function () {};\n\n// date from string and format string\nfunction configFromStringAndFormat(config) {\n  // TODO: Move this to another part of the creation flow to prevent circular deps\n  if (config._f === _hooks.hooks.ISO_8601) {\n    (0, _fromString.configFromISO)(config);\n    return;\n  }\n  if (config._f === _hooks.hooks.RFC_2822) {\n    (0, _fromString.configFromRFC2822)(config);\n    return;\n  }\n  config._a = [];\n  (0, _parsingFlags2.default)(config).empty = true;\n\n  // This array is used to make a Date, either with `new Date` or `Date.UTC`\n  var string = '' + config._i,\n      i,\n      parsedInput,\n      tokens,\n      token,\n      skipped,\n      stringLength = string.length,\n      totalParsedInputLength = 0;\n\n  tokens = (0, _format.expandFormat)(config._f, config._locale).match(_format.formattingTokens) || [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n    parsedInput = (string.match((0, _regex.getParseRegexForToken)(token, config)) || [])[0];\n    // console.log('token', token, 'parsedInput', parsedInput,\n    //         'regex', getParseRegexForToken(token, config));\n    if (parsedInput) {\n      skipped = string.substr(0, string.indexOf(parsedInput));\n      if (skipped.length > 0) {\n        (0, _parsingFlags2.default)(config).unusedInput.push(skipped);\n      }\n      string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n      totalParsedInputLength += parsedInput.length;\n    }\n    // don't parse if it's not a known token\n    if (_format.formatTokenFunctions[token]) {\n      if (parsedInput) {\n        (0, _parsingFlags2.default)(config).empty = false;\n      } else {\n        (0, _parsingFlags2.default)(config).unusedTokens.push(token);\n      }\n      (0, _token.addTimeToArrayFromToken)(token, parsedInput, config);\n    } else if (config._strict && !parsedInput) {\n      (0, _parsingFlags2.default)(config).unusedTokens.push(token);\n    }\n  }\n\n  // add remaining unparsed input length to the string\n  (0, _parsingFlags2.default)(config).charsLeftOver = stringLength - totalParsedInputLength;\n  if (string.length > 0) {\n    (0, _parsingFlags2.default)(config).unusedInput.push(string);\n  }\n\n  // clear _12h flag if hour is <= 12\n  if (config._a[_constants.HOUR] <= 12 && (0, _parsingFlags2.default)(config).bigHour === true && config._a[_constants.HOUR] > 0) {\n    (0, _parsingFlags2.default)(config).bigHour = undefined;\n  }\n\n  (0, _parsingFlags2.default)(config).parsedDateParts = config._a.slice(0);\n  (0, _parsingFlags2.default)(config).meridiem = config._meridiem;\n  // handle meridiem\n  config._a[_constants.HOUR] = meridiemFixWrap(config._locale, config._a[_constants.HOUR], config._meridiem);\n\n  (0, _fromArray.configFromArray)(config);\n  (0, _checkOverflow2.default)(config);\n}\n\nfunction meridiemFixWrap(locale, hour, meridiem) {\n  var isPm;\n\n  if (meridiem == null) {\n    // nothing to do\n    return hour;\n  }\n  if (locale.meridiemHour != null) {\n    return locale.meridiemHour(hour, meridiem);\n  } else if (locale.isPM != null) {\n    // Fallback\n    isPm = locale.isPM(meridiem);\n    if (isPm && hour < 12) {\n      hour += 12;\n    }\n    if (!isPm && hour === 12) {\n      hour = 0;\n    }\n    return hour;\n  } else {\n    // this is not supposed to happen\n    return hour;\n  }\n}"},"hash":"fe1172c083bdeb36ba7e414202d09a14"}