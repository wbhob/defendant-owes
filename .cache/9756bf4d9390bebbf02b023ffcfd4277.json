{"dependencies":[{"name":"../moment/constructor","loc":{"line":1,"column":27}},{"name":"./from-string-and-format","loc":{"line":2,"column":42}},{"name":"./parsing-flags","loc":{"line":3,"column":28}},{"name":"./valid","loc":{"line":4,"column":24}},{"name":"../utils/extend","loc":{"line":5,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFromStringAndArray = configFromStringAndArray;\n\nvar _constructor = require(\"../moment/constructor\");\n\nvar _fromStringAndFormat = require(\"./from-string-and-format\");\n\nvar _parsingFlags = require(\"./parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nvar _valid = require(\"./valid\");\n\nvar _extend = require(\"../utils/extend\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// date from string and array of format strings\nfunction configFromStringAndArray(config) {\n  var tempConfig, bestMoment, scoreToBeat, i, currentScore;\n\n  if (config._f.length === 0) {\n    (0, _parsingFlags2.default)(config).invalidFormat = true;\n    config._d = new Date(NaN);\n    return;\n  }\n\n  for (i = 0; i < config._f.length; i++) {\n    currentScore = 0;\n    tempConfig = (0, _constructor.copyConfig)({}, config);\n    if (config._useUTC != null) {\n      tempConfig._useUTC = config._useUTC;\n    }\n    tempConfig._f = config._f[i];\n    (0, _fromStringAndFormat.configFromStringAndFormat)(tempConfig);\n\n    if (!(0, _valid.isValid)(tempConfig)) {\n      continue;\n    }\n\n    // if there is any input that was not parsed add a penalty for that format\n    currentScore += (0, _parsingFlags2.default)(tempConfig).charsLeftOver;\n\n    //or tokens\n    currentScore += (0, _parsingFlags2.default)(tempConfig).unusedTokens.length * 10;\n\n    (0, _parsingFlags2.default)(tempConfig).score = currentScore;\n\n    if (scoreToBeat == null || currentScore < scoreToBeat) {\n      scoreToBeat = currentScore;\n      bestMoment = tempConfig;\n    }\n  }\n\n  (0, _extend2.default)(config, bestMoment || tempConfig);\n}"},"hash":"a8a72f7a2cad5abe06c538f59aeae09a"}