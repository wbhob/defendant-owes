{"dependencies":[{"name":"../moment/get-set","loc":{"line":1,"column":20}},{"name":"../utils/has-own-prop","loc":{"line":2,"column":23}},{"name":"../format/format","loc":{"line":3,"column":31}},{"name":"./aliases","loc":{"line":4,"column":29}},{"name":"./priorities","loc":{"line":5,"column":32}},{"name":"../parse/regex","loc":{"line":6,"column":73}},{"name":"../parse/token","loc":{"line":7,"column":30}},{"name":"../utils/hooks","loc":{"line":8,"column":22}},{"name":"./constants","loc":{"line":9,"column":22}},{"name":"../utils/to-int","loc":{"line":10,"column":18}},{"name":"../utils/is-array","loc":{"line":11,"column":20}},{"name":"../utils/is-number","loc":{"line":12,"column":21}},{"name":"../utils/mod","loc":{"line":13,"column":16}},{"name":"../utils/index-of","loc":{"line":14,"column":20}},{"name":"../create/utc","loc":{"line":15,"column":26}},{"name":"../create/parsing-flags","loc":{"line":16,"column":28}},{"name":"../units/year","loc":{"line":17,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultLocaleMonthsShort = exports.defaultLocaleMonths = undefined;\nexports.daysInMonth = daysInMonth;\nexports.localeMonths = localeMonths;\nexports.localeMonthsShort = localeMonthsShort;\nexports.localeMonthsParse = localeMonthsParse;\nexports.setMonth = setMonth;\nexports.getSetMonth = getSetMonth;\nexports.getDaysInMonth = getDaysInMonth;\nexports.monthsShortRegex = monthsShortRegex;\nexports.monthsRegex = monthsRegex;\n\nvar _getSet = require(\"../moment/get-set\");\n\nvar _hasOwnProp = require(\"../utils/has-own-prop\");\n\nvar _hasOwnProp2 = _interopRequireDefault(_hasOwnProp);\n\nvar _format = require(\"../format/format\");\n\nvar _aliases = require(\"./aliases\");\n\nvar _priorities = require(\"./priorities\");\n\nvar _regex = require(\"../parse/regex\");\n\nvar _token = require(\"../parse/token\");\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar _constants = require(\"./constants\");\n\nvar _toInt = require(\"../utils/to-int\");\n\nvar _toInt2 = _interopRequireDefault(_toInt);\n\nvar _isArray = require(\"../utils/is-array\");\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _isNumber = require(\"../utils/is-number\");\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _mod = require(\"../utils/mod\");\n\nvar _mod2 = _interopRequireDefault(_mod);\n\nvar _indexOf = require(\"../utils/index-of\");\n\nvar _indexOf2 = _interopRequireDefault(_indexOf);\n\nvar _utc = require(\"../create/utc\");\n\nvar _parsingFlags = require(\"../create/parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nvar _year = require(\"../units/year\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction daysInMonth(year, month) {\n  if (isNaN(year) || isNaN(month)) {\n    return NaN;\n  }\n  var modMonth = (0, _mod2.default)(month, 12);\n  year += (month - modMonth) / 12;\n  return modMonth === 1 ? (0, _year.isLeapYear)(year) ? 29 : 28 : 31 - modMonth % 7 % 2;\n}\n\n// FORMATTING\n\n(0, _format.addFormatToken)('M', ['MM', 2], 'Mo', function () {\n  return this.month() + 1;\n});\n\n(0, _format.addFormatToken)('MMM', 0, 0, function (format) {\n  return this.localeData().monthsShort(this, format);\n});\n\n(0, _format.addFormatToken)('MMMM', 0, 0, function (format) {\n  return this.localeData().months(this, format);\n});\n\n// ALIASES\n\n(0, _aliases.addUnitAlias)('month', 'M');\n\n// PRIORITY\n\n(0, _priorities.addUnitPriority)('month', 8);\n\n// PARSING\n\n(0, _regex.addRegexToken)('M', _regex.match1to2);\n(0, _regex.addRegexToken)('MM', _regex.match1to2, _regex.match2);\n(0, _regex.addRegexToken)('MMM', function (isStrict, locale) {\n  return locale.monthsShortRegex(isStrict);\n});\n(0, _regex.addRegexToken)('MMMM', function (isStrict, locale) {\n  return locale.monthsRegex(isStrict);\n});\n\n(0, _token.addParseToken)(['M', 'MM'], function (input, array) {\n  array[_constants.MONTH] = (0, _toInt2.default)(input) - 1;\n});\n\n(0, _token.addParseToken)(['MMM', 'MMMM'], function (input, array, config, token) {\n  var month = config._locale.monthsParse(input, token, config._strict);\n  // if we didn't find a month name, mark the date as invalid.\n  if (month != null) {\n    array[_constants.MONTH] = month;\n  } else {\n    (0, _parsingFlags2.default)(config).invalidMonth = input;\n  }\n});\n\n// LOCALES\n\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\nvar defaultLocaleMonths = exports.defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nfunction localeMonths(m, format) {\n  if (!m) {\n    return (0, _isArray2.default)(this._months) ? this._months : this._months['standalone'];\n  }\n  return (0, _isArray2.default)(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n}\n\nvar defaultLocaleMonthsShort = exports.defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\nfunction localeMonthsShort(m, format) {\n  if (!m) {\n    return (0, _isArray2.default)(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];\n  }\n  return (0, _isArray2.default)(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n}\n\nfunction handleStrictParse(monthName, format, strict) {\n  var i,\n      ii,\n      mom,\n      llc = monthName.toLocaleLowerCase();\n  if (!this._monthsParse) {\n    // this is not used\n    this._monthsParse = [];\n    this._longMonthsParse = [];\n    this._shortMonthsParse = [];\n    for (i = 0; i < 12; ++i) {\n      mom = (0, _utc.createUTC)([2000, i]);\n      this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n      this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n    }\n  }\n\n  if (strict) {\n    if (format === 'MMM') {\n      ii = _indexOf2.default.call(this._shortMonthsParse, llc);\n      return ii !== -1 ? ii : null;\n    } else {\n      ii = _indexOf2.default.call(this._longMonthsParse, llc);\n      return ii !== -1 ? ii : null;\n    }\n  } else {\n    if (format === 'MMM') {\n      ii = _indexOf2.default.call(this._shortMonthsParse, llc);\n      if (ii !== -1) {\n        return ii;\n      }\n      ii = _indexOf2.default.call(this._longMonthsParse, llc);\n      return ii !== -1 ? ii : null;\n    } else {\n      ii = _indexOf2.default.call(this._longMonthsParse, llc);\n      if (ii !== -1) {\n        return ii;\n      }\n      ii = _indexOf2.default.call(this._shortMonthsParse, llc);\n      return ii !== -1 ? ii : null;\n    }\n  }\n}\n\nfunction localeMonthsParse(monthName, format, strict) {\n  var i, mom, regex;\n\n  if (this._monthsParseExact) {\n    return handleStrictParse.call(this, monthName, format, strict);\n  }\n\n  if (!this._monthsParse) {\n    this._monthsParse = [];\n    this._longMonthsParse = [];\n    this._shortMonthsParse = [];\n  }\n\n  // TODO: add sorting\n  // Sorting makes sure if one month (or abbr) is a prefix of another\n  // see sorting in computeMonthsParse\n  for (i = 0; i < 12; i++) {\n    // make the regex if we don't have it already\n    mom = (0, _utc.createUTC)([2000, i]);\n    if (strict && !this._longMonthsParse[i]) {\n      this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n      this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n    }\n    if (!strict && !this._monthsParse[i]) {\n      regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n      this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n    }\n    // test the regex\n    if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n      return i;\n    } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n      return i;\n    } else if (!strict && this._monthsParse[i].test(monthName)) {\n      return i;\n    }\n  }\n}\n\n// MOMENTS\n\nfunction setMonth(mom, value) {\n  var dayOfMonth;\n\n  if (!mom.isValid()) {\n    // No op\n    return mom;\n  }\n\n  if (typeof value === 'string') {\n    if (/^\\d+$/.test(value)) {\n      value = (0, _toInt2.default)(value);\n    } else {\n      value = mom.localeData().monthsParse(value);\n      // TODO: Another silent failure?\n      if (!(0, _isNumber2.default)(value)) {\n        return mom;\n      }\n    }\n  }\n\n  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n  mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n  return mom;\n}\n\nfunction getSetMonth(value) {\n  if (value != null) {\n    setMonth(this, value);\n    _hooks.hooks.updateOffset(this, true);\n    return this;\n  } else {\n    return (0, _getSet.get)(this, 'Month');\n  }\n}\n\nfunction getDaysInMonth() {\n  return daysInMonth(this.year(), this.month());\n}\n\nvar defaultMonthsShortRegex = _regex.matchWord;\nfunction monthsShortRegex(isStrict) {\n  if (this._monthsParseExact) {\n    if (!(0, _hasOwnProp2.default)(this, '_monthsRegex')) {\n      computeMonthsParse.call(this);\n    }\n    if (isStrict) {\n      return this._monthsShortStrictRegex;\n    } else {\n      return this._monthsShortRegex;\n    }\n  } else {\n    if (!(0, _hasOwnProp2.default)(this, '_monthsShortRegex')) {\n      this._monthsShortRegex = defaultMonthsShortRegex;\n    }\n    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n  }\n}\n\nvar defaultMonthsRegex = _regex.matchWord;\nfunction monthsRegex(isStrict) {\n  if (this._monthsParseExact) {\n    if (!(0, _hasOwnProp2.default)(this, '_monthsRegex')) {\n      computeMonthsParse.call(this);\n    }\n    if (isStrict) {\n      return this._monthsStrictRegex;\n    } else {\n      return this._monthsRegex;\n    }\n  } else {\n    if (!(0, _hasOwnProp2.default)(this, '_monthsRegex')) {\n      this._monthsRegex = defaultMonthsRegex;\n    }\n    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n  }\n}\n\nfunction computeMonthsParse() {\n  function cmpLenRev(a, b) {\n    return b.length - a.length;\n  }\n\n  var shortPieces = [],\n      longPieces = [],\n      mixedPieces = [],\n      i,\n      mom;\n  for (i = 0; i < 12; i++) {\n    // make the regex if we don't have it already\n    mom = (0, _utc.createUTC)([2000, i]);\n    shortPieces.push(this.monthsShort(mom, ''));\n    longPieces.push(this.months(mom, ''));\n    mixedPieces.push(this.months(mom, ''));\n    mixedPieces.push(this.monthsShort(mom, ''));\n  }\n  // Sorting makes sure if one month (or abbr) is a prefix of another it\n  // will match the longer piece.\n  shortPieces.sort(cmpLenRev);\n  longPieces.sort(cmpLenRev);\n  mixedPieces.sort(cmpLenRev);\n  for (i = 0; i < 12; i++) {\n    shortPieces[i] = (0, _regex.regexEscape)(shortPieces[i]);\n    longPieces[i] = (0, _regex.regexEscape)(longPieces[i]);\n  }\n  for (i = 0; i < 24; i++) {\n    mixedPieces[i] = (0, _regex.regexEscape)(mixedPieces[i]);\n  }\n\n  this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n  this._monthsShortRegex = this._monthsRegex;\n  this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n  this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n}"},"hash":"a5b4165a841b2de882fa5c64fa2938aa"}