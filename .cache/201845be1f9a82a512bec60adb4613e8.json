{"dependencies":[{"name":"./from-string-and-format","loc":{"line":1,"column":42}},{"name":"./date-from-array","loc":{"line":2,"column":30}},{"name":"./from-array","loc":{"line":3,"column":32}},{"name":"../utils/hooks","loc":{"line":4,"column":22}},{"name":"../utils/deprecate","loc":{"line":5,"column":26}},{"name":"./parsing-flags","loc":{"line":6,"column":28}},{"name":"../units/month","loc":{"line":7,"column":39}},{"name":"../units/day-of-week","loc":{"line":8,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFromISO = configFromISO;\nexports.configFromRFC2822 = configFromRFC2822;\nexports.configFromString = configFromString;\n\nvar _fromStringAndFormat = require(\"./from-string-and-format\");\n\nvar _dateFromArray = require(\"./date-from-array\");\n\nvar _fromArray = require(\"./from-array\");\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar _deprecate = require(\"../utils/deprecate\");\n\nvar _parsingFlags = require(\"./parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nvar _month = require(\"../units/month\");\n\nvar _dayOfWeek = require(\"../units/day-of-week\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\nvar isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/],\n// YYYYMM is NOT allowed by the standard\n['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/]];\n\n// iso time formats and regexes\nvar isoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]];\n\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n// date from iso format\nfunction configFromISO(config) {\n  var i,\n      l,\n      string = config._i,\n      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n      allowTime,\n      dateFormat,\n      timeFormat,\n      tzFormat;\n\n  if (match) {\n    (0, _parsingFlags2.default)(config).iso = true;\n\n    for (i = 0, l = isoDates.length; i < l; i++) {\n      if (isoDates[i][1].exec(match[1])) {\n        dateFormat = isoDates[i][0];\n        allowTime = isoDates[i][2] !== false;\n        break;\n      }\n    }\n    if (dateFormat == null) {\n      config._isValid = false;\n      return;\n    }\n    if (match[3]) {\n      for (i = 0, l = isoTimes.length; i < l; i++) {\n        if (isoTimes[i][1].exec(match[3])) {\n          // match[2] should be 'T' or space\n          timeFormat = (match[2] || ' ') + isoTimes[i][0];\n          break;\n        }\n      }\n      if (timeFormat == null) {\n        config._isValid = false;\n        return;\n      }\n    }\n    if (!allowTime && timeFormat != null) {\n      config._isValid = false;\n      return;\n    }\n    if (match[4]) {\n      if (tzRegex.exec(match[4])) {\n        tzFormat = 'Z';\n      } else {\n        config._isValid = false;\n        return;\n      }\n    }\n    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n    (0, _fromStringAndFormat.configFromStringAndFormat)(config);\n  } else {\n    config._isValid = false;\n  }\n}\n\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\nvar rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  var result = [untruncateYear(yearStr), _month.defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];\n\n  if (secondStr) {\n    result.push(parseInt(secondStr, 10));\n  }\n\n  return result;\n}\n\nfunction untruncateYear(yearStr) {\n  var year = parseInt(yearStr, 10);\n  if (year <= 49) {\n    return 2000 + year;\n  } else if (year <= 999) {\n    return 1900 + year;\n  }\n  return year;\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').trim();\n}\n\nfunction checkWeekday(weekdayStr, parsedInput, config) {\n  if (weekdayStr) {\n    // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n    var weekdayProvided = _dayOfWeek.defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n    if (weekdayProvided !== weekdayActual) {\n      (0, _parsingFlags2.default)(config).weekdayMismatch = true;\n      config._isValid = false;\n      return false;\n    }\n  }\n  return true;\n}\n\nvar obsOffsets = {\n  UT: 0,\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\n  if (obsOffset) {\n    return obsOffsets[obsOffset];\n  } else if (militaryOffset) {\n    // the only allowed military tz is Z\n    return 0;\n  } else {\n    var hm = parseInt(numOffset, 10);\n    var m = hm % 100,\n        h = (hm - m) / 100;\n    return h * 60 + m;\n  }\n}\n\n// date and time from ref 2822 format\nfunction configFromRFC2822(config) {\n  var match = rfc2822.exec(preprocessRFC2822(config._i));\n  if (match) {\n    var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n    if (!checkWeekday(match[1], parsedArray, config)) {\n      return;\n    }\n\n    config._a = parsedArray;\n    config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n    config._d = _dateFromArray.createUTCDate.apply(null, config._a);\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n    (0, _parsingFlags2.default)(config).rfc2822 = true;\n  } else {\n    config._isValid = false;\n  }\n}\n\n// date from iso format or fallback\nfunction configFromString(config) {\n  var matched = aspNetJsonRegex.exec(config._i);\n\n  if (matched !== null) {\n    config._d = new Date(+matched[1]);\n    return;\n  }\n\n  configFromISO(config);\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  configFromRFC2822(config);\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  // Final attempt, use Input Fallback\n  _hooks.hooks.createFromInputFallback(config);\n}\n\n_hooks.hooks.createFromInputFallback = (0, _deprecate.deprecate)('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n  config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n});"},"hash":"4cb066f4c4f315aef9006949be8f4005"}