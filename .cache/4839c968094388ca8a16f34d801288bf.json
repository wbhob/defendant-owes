{"dependencies":[{"name":"../utils/is-array","loc":{"line":1,"column":20}},{"name":"../utils/has-own-prop","loc":{"line":2,"column":23}},{"name":"../utils/is-undefined","loc":{"line":3,"column":24}},{"name":"../utils/compare-arrays","loc":{"line":4,"column":26}},{"name":"../utils/deprecate","loc":{"line":5,"column":32}},{"name":"./set","loc":{"line":6,"column":29}},{"name":"./constructor","loc":{"line":7,"column":23}},{"name":"../utils/keys","loc":{"line":8,"column":17}},{"name":"./base-config","loc":{"line":10,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSetGlobalLocale = getSetGlobalLocale;\nexports.defineLocale = defineLocale;\nexports.updateLocale = updateLocale;\nexports.getLocale = getLocale;\nexports.listLocales = listLocales;\n\nvar _isArray = require(\"../utils/is-array\");\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _hasOwnProp = require(\"../utils/has-own-prop\");\n\nvar _hasOwnProp2 = _interopRequireDefault(_hasOwnProp);\n\nvar _isUndefined = require(\"../utils/is-undefined\");\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _compareArrays = require(\"../utils/compare-arrays\");\n\nvar _compareArrays2 = _interopRequireDefault(_compareArrays);\n\nvar _deprecate = require(\"../utils/deprecate\");\n\nvar _set = require(\"./set\");\n\nvar _constructor = require(\"./constructor\");\n\nvar _keys = require(\"../utils/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _baseConfig = require(\"./base-config\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// internal storage for locale config files\nvar locales = {};\nvar localeFamilies = {};\nvar globalLocale;\n\nfunction normalizeLocale(key) {\n  return key ? key.toLowerCase().replace('_', '-') : key;\n}\n\n// pick the locale from the array\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {\n  var i = 0,\n      j,\n      next,\n      locale,\n      split;\n\n  while (i < names.length) {\n    split = normalizeLocale(names[i]).split('-');\n    j = split.length;\n    next = normalizeLocale(names[i + 1]);\n    next = next ? next.split('-') : null;\n    while (j > 0) {\n      locale = loadLocale(split.slice(0, j).join('-'));\n      if (locale) {\n        return locale;\n      }\n      if (next && next.length >= j && (0, _compareArrays2.default)(split, next, true) >= j - 1) {\n        //the next array item is better than a shallower substring of this one\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction loadLocale(name) {\n  var oldLocale = null;\n  // TODO: Find a better way to register and load all the locales in Node\n  if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {\n    try {\n      oldLocale = globalLocale._abbr;\n      var aliasedRequire = require;\n      aliasedRequire('./locale/' + name);\n      getSetGlobalLocale(oldLocale);\n    } catch (e) {}\n  }\n  return locales[name];\n}\n\n// This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\nfunction getSetGlobalLocale(key, values) {\n  var data;\n  if (key) {\n    if ((0, _isUndefined2.default)(values)) {\n      data = getLocale(key);\n    } else {\n      data = defineLocale(key, values);\n    }\n\n    if (data) {\n      // moment.duration._locale = moment._locale = data;\n      globalLocale = data;\n    }\n  }\n\n  return globalLocale._abbr;\n}\n\nfunction defineLocale(name, config) {\n  if (config !== null) {\n    var parentConfig = _baseConfig.baseConfig;\n    config.abbr = name;\n    if (locales[name] != null) {\n      (0, _deprecate.deprecateSimple)('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n      parentConfig = locales[name]._config;\n    } else if (config.parentLocale != null) {\n      if (locales[config.parentLocale] != null) {\n        parentConfig = locales[config.parentLocale]._config;\n      } else {\n        if (!localeFamilies[config.parentLocale]) {\n          localeFamilies[config.parentLocale] = [];\n        }\n        localeFamilies[config.parentLocale].push({\n          name: name,\n          config: config\n        });\n        return null;\n      }\n    }\n    locales[name] = new _constructor.Locale((0, _set.mergeConfigs)(parentConfig, config));\n\n    if (localeFamilies[name]) {\n      localeFamilies[name].forEach(function (x) {\n        defineLocale(x.name, x.config);\n      });\n    }\n\n    // backwards compat for now: also set the locale\n    // make sure we set the locale AFTER all child locales have been\n    // created, so we won't end up with the child locale set.\n    getSetGlobalLocale(name);\n\n    return locales[name];\n  } else {\n    // useful for testing\n    delete locales[name];\n    return null;\n  }\n}\n\nfunction updateLocale(name, config) {\n  if (config != null) {\n    var locale,\n        tmpLocale,\n        parentConfig = _baseConfig.baseConfig;\n    // MERGE\n    tmpLocale = loadLocale(name);\n    if (tmpLocale != null) {\n      parentConfig = tmpLocale._config;\n    }\n    config = (0, _set.mergeConfigs)(parentConfig, config);\n    locale = new _constructor.Locale(config);\n    locale.parentLocale = locales[name];\n    locales[name] = locale;\n\n    // backwards compat for now: also set the locale\n    getSetGlobalLocale(name);\n  } else {\n    // pass null for config to unupdate, useful for tests\n    if (locales[name] != null) {\n      if (locales[name].parentLocale != null) {\n        locales[name] = locales[name].parentLocale;\n      } else if (locales[name] != null) {\n        delete locales[name];\n      }\n    }\n  }\n  return locales[name];\n}\n\n// returns locale data\nfunction getLocale(key) {\n  var locale;\n\n  if (key && key._locale && key._locale._abbr) {\n    key = key._locale._abbr;\n  }\n\n  if (!key) {\n    return globalLocale;\n  }\n\n  if (!(0, _isArray2.default)(key)) {\n    //short-circuit everything else\n    locale = loadLocale(key);\n    if (locale) {\n      return locale;\n    }\n    key = [key];\n  }\n\n  return chooseLocale(key);\n}\n\nfunction listLocales() {\n  return (0, _keys2.default)(locales);\n}"},"hash":"c5cf659c86522680bc210089ed883c46"}