{"dependencies":[{"name":"./constructor","loc":{"line":1,"column":37}},{"name":"../utils/is-number","loc":{"line":2,"column":21}},{"name":"../utils/to-int","loc":{"line":3,"column":18}},{"name":"../utils/abs-round","loc":{"line":4,"column":21}},{"name":"../utils/has-own-prop","loc":{"line":5,"column":23}},{"name":"../units/constants","loc":{"line":6,"column":56}},{"name":"../units/offset","loc":{"line":7,"column":32}},{"name":"../create/local","loc":{"line":8,"column":28}},{"name":"./valid","loc":{"line":9,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDuration = createDuration;\n\nvar _constructor = require(\"./constructor\");\n\nvar _isNumber = require(\"../utils/is-number\");\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _toInt = require(\"../utils/to-int\");\n\nvar _toInt2 = _interopRequireDefault(_toInt);\n\nvar _absRound = require(\"../utils/abs-round\");\n\nvar _absRound2 = _interopRequireDefault(_absRound);\n\nvar _hasOwnProp = require(\"../utils/has-own-prop\");\n\nvar _hasOwnProp2 = _interopRequireDefault(_hasOwnProp);\n\nvar _constants = require(\"../units/constants\");\n\nvar _offset = require(\"../units/offset\");\n\nvar _local = require(\"../create/local\");\n\nvar _valid = require(\"./valid\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ASP.NET json date format regex\nvar aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\nvar isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\nfunction createDuration(input, key) {\n  var duration = input,\n\n  // matching against regexp is expensive, do it on demand\n  match = null,\n      sign,\n      ret,\n      diffRes;\n\n  if ((0, _constructor.isDuration)(input)) {\n    duration = {\n      ms: input._milliseconds,\n      d: input._days,\n      M: input._months\n    };\n  } else if ((0, _isNumber2.default)(input)) {\n    duration = {};\n    if (key) {\n      duration[key] = input;\n    } else {\n      duration.milliseconds = input;\n    }\n  } else if (!!(match = aspNetRegex.exec(input))) {\n    sign = match[1] === '-' ? -1 : 1;\n    duration = {\n      y: 0,\n      d: (0, _toInt2.default)(match[_constants.DATE]) * sign,\n      h: (0, _toInt2.default)(match[_constants.HOUR]) * sign,\n      m: (0, _toInt2.default)(match[_constants.MINUTE]) * sign,\n      s: (0, _toInt2.default)(match[_constants.SECOND]) * sign,\n      ms: (0, _toInt2.default)((0, _absRound2.default)(match[_constants.MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n    };\n  } else if (!!(match = isoRegex.exec(input))) {\n    sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;\n    duration = {\n      y: parseIso(match[2], sign),\n      M: parseIso(match[3], sign),\n      w: parseIso(match[4], sign),\n      d: parseIso(match[5], sign),\n      h: parseIso(match[6], sign),\n      m: parseIso(match[7], sign),\n      s: parseIso(match[8], sign)\n    };\n  } else if (duration == null) {\n    // checks for null or undefined\n    duration = {};\n  } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n    diffRes = momentsDifference((0, _local.createLocal)(duration.from), (0, _local.createLocal)(duration.to));\n\n    duration = {};\n    duration.ms = diffRes.milliseconds;\n    duration.M = diffRes.months;\n  }\n\n  ret = new _constructor.Duration(duration);\n\n  if ((0, _constructor.isDuration)(input) && (0, _hasOwnProp2.default)(input, '_locale')) {\n    ret._locale = input._locale;\n  }\n\n  return ret;\n}\n\ncreateDuration.fn = _constructor.Duration.prototype;\ncreateDuration.invalid = _valid.createInvalid;\n\nfunction parseIso(inp, sign) {\n  // We'd normally use ~~inp for this, but unfortunately it also\n  // converts floats to ints.\n  // inp may be undefined, so careful calling replace on it.\n  var res = inp && parseFloat(inp.replace(',', '.'));\n  // apply sign while we're at it\n  return (isNaN(res) ? 0 : res) * sign;\n}\n\nfunction positiveMomentsDifference(base, other) {\n  var res = { milliseconds: 0, months: 0 };\n\n  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n  if (base.clone().add(res.months, 'M').isAfter(other)) {\n    --res.months;\n  }\n\n  res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n  return res;\n}\n\nfunction momentsDifference(base, other) {\n  var res;\n  if (!(base.isValid() && other.isValid())) {\n    return { milliseconds: 0, months: 0 };\n  }\n\n  other = (0, _offset.cloneWithOffset)(other, base);\n  if (base.isBefore(other)) {\n    res = positiveMomentsDifference(base, other);\n  } else {\n    res = positiveMomentsDifference(other, base);\n    res.milliseconds = -res.milliseconds;\n    res.months = -res.months;\n  }\n\n  return res;\n}"},"hash":"ca454fc423ec98db17b99450f6e1d1af"}